// Code generated by "enumer -type=RulePolicy -linecomment"; DO NOT EDIT.

//
package gconfig

import (
	"fmt"
)

const _RulePolicyName = "allowrequireReasonrequireApproval"

var _RulePolicyIndex = [...]uint8{0, 5, 18, 33}

func (i RulePolicy) String() string {
	i -= 1
	if i < 0 || i >= RulePolicy(len(_RulePolicyIndex)-1) {
		return fmt.Sprintf("RulePolicy(%d)", i+1)
	}
	return _RulePolicyName[_RulePolicyIndex[i]:_RulePolicyIndex[i+1]]
}

var _RulePolicyValues = []RulePolicy{1, 2, 3}

var _RulePolicyNameToValueMap = map[string]RulePolicy{
	_RulePolicyName[0:5]:   1,
	_RulePolicyName[5:18]:  2,
	_RulePolicyName[18:33]: 3,
}

// RulePolicyString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func RulePolicyString(s string) (RulePolicy, error) {
	if val, ok := _RulePolicyNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to RulePolicy values", s)
}

// RulePolicyValues returns all values of the enum
func RulePolicyValues() []RulePolicy {
	return _RulePolicyValues
}

// IsARulePolicy returns "true" if the value is listed in the enum definition. "false" otherwise
func (i RulePolicy) IsARulePolicy() bool {
	for _, v := range _RulePolicyValues {
		if i == v {
			return true
		}
	}
	return false
}
