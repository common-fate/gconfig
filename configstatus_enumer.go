// Code generated by "enumer -type=ConfigStatus -linecomment"; DO NOT EDIT.

//
package gconfig

import (
	"fmt"
)

const _ConfigStatusName = "PENDINGAPPROVED"

var _ConfigStatusIndex = [...]uint8{0, 7, 15}

func (i ConfigStatus) String() string {
	i -= 1
	if i < 0 || i >= ConfigStatus(len(_ConfigStatusIndex)-1) {
		return fmt.Sprintf("ConfigStatus(%d)", i+1)
	}
	return _ConfigStatusName[_ConfigStatusIndex[i]:_ConfigStatusIndex[i+1]]
}

var _ConfigStatusValues = []ConfigStatus{1, 2}

var _ConfigStatusNameToValueMap = map[string]ConfigStatus{
	_ConfigStatusName[0:7]:  1,
	_ConfigStatusName[7:15]: 2,
}

// ConfigStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ConfigStatusString(s string) (ConfigStatus, error) {
	if val, ok := _ConfigStatusNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ConfigStatus values", s)
}

// ConfigStatusValues returns all values of the enum
func ConfigStatusValues() []ConfigStatus {
	return _ConfigStatusValues
}

// IsAConfigStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ConfigStatus) IsAConfigStatus() bool {
	for _, v := range _ConfigStatusValues {
		if i == v {
			return true
		}
	}
	return false
}
